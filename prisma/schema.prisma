// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
}

model Category {
  id        String            @id @default(uuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model Brand {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String?
  product   Product? @relation("ProductToImage", fields: [productId], references: [id])
}

model Product {
  id         String            @id @default(uuid())
  name       String            @unique
  price      Decimal
  isFeatured Boolean
  isArchived Boolean
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  images     Image[]           @relation("ProductToImage")
  categories ProductCategory[]
}

// model ProductTag {
//   productId  String
//   product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   tagId      String
//   tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
//   assignedAt DateTime @default(now())

//   @@id([productId, tagId])
// }

model ProductCategory {
  productId  String
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}
